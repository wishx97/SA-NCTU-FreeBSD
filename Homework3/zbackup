#!/usr/local/bin/bash

# Helper function for printing to stderr
stderr() {
	echo $@ >&2
}

# Error print
error() {
	stderr "ERROR: $*"
}

zbackup_create() {
	if [ "$1" == "create" ]
	then
		shift
	fi
	if [ $# -eq 0 ]
	then
		error "create: Invalid Argument"
		return
	fi
	# check if argument are correct
	if [ $# -le 2 ]
	then
		local rotationCount=20
		local re='^[0-9]+$'
		if [ "$2" != "" ] && [[ $2 =~ $re ]];
		then
			rotationCount=$2
		fi
		# 1. create
		local getTime=$(date +"%Y-%m-%d_%T")  # get time and date
		local toPrint="$1"@"$getTime"  # create snapshot parameter
		zfs snapshot -r "$toPrint"
		if [ $? -eq 0 ]
		then
			echo "Snap $toPrint" > /dev/stdout
			# 2. rotate
			local listSnap=$(zfs list -t snapshot  | grep "^$1.*" | awk '{count++} END {print count}')
			if [ "$listSnap" == "" ]
			then
				listSnap=0
			fi
			#echo "$listSnap"
			#echo "$rotationCount"
			if [ $listSnap -gt $rotationCount ]
			then
				local differenceCount=$((listSnap-rotationCount))
				local sortedList=$(zfs list -t snapshot | grep "^$1.*" | sort -t "@" | awk -v var=$differenceCount '{ if(count++ < var) print $1 }')
				while read -r line; do
					zfs destroy $line
					echo "Rotate $line"
				done <<< "$sortedList"
			
			fi
 		fi
	else
		error "Usage: zbackup[[--list | --delete | --export] target-dataset [ID] | [--import] target-dataset filename | target dataset [rotation count]]"
	fi
}

zbackup_list() {
	shift
	local snapList=""
	if [ $# -eq 1 ]
	then
		snapList=$(zfs list -t snapshot | grep -w "$1" | awk '{ print $1 }')
	elif [ $# -eq 0 ]
	then
		snapList=$(zfs list -t snapshot | awk 'NR>=2 { print $1 }')
	else
		error "list: Too many arguments"
		return
	fi
	if [ "$snapList" == "" ]
	then
		echo "No dataset found"
		return
	fi
	# extract name from snapshot
	echo "Dataset" > name.txt  
	echo "$snapList" | sed 's/@.*//' >> name.txt
	echo "Time" > time.txt  
	local time=$(echo "$snapList" | sed 's/.*@//')
	echo "$time" >> time.txt
	echo "ID" > id.txt  
	local id=$(echo "$time" | wc -l)
	seq "$id" >> id.txt
	paste id.txt name.txt time.txt | column -t > final_list.txt
	cat final_list.txt
	rm -f id.txt
	rm -f name.txt
	rm -f time.txt
}

zbackup_export() {
	shift
	local id=1
	if [ $# -eq 0 ]
	then
		error "export: Invalid Argument"
		return
	fi
	# check if argument are correct
	if [ $# -le 2 ]
	then
		local re='^[0-9]+$'
		if  [ "$2" != "" ] && [[ $2 =~ $re ]];
		then
			id=$2
		fi
		local tmp_cond=$(zbackup_list list "$1")
		if [ "$tmp_cond" == "No dataset found" ]
		then
			error "export:dataset name error"
			return
		fi
		local list=""
		list=$(awk -v var1=$id '$1 == var1 {print $2"@"$3}' final_list.txt)
		if [ "$list" != "" ]
		then
			local tmp_list=$list
			list=$(echo $list | sed 's/\//./g')
			zfs send "$tmp_list" | xz | openssl enc -aes-256-cbc -a -salt > /backup/"$list".xz.enc
		else
			error "export: no dataset found"
		fi
	else
		error "export: Too many arguments"
		return
	fi
}

zbackup_delete() {
	shift
	if [ $# -eq 2 ]
	then
		local re='^[0-9]+$'
		if [[ $2 =~ $re ]];
		then
			local tmp_cond=$(zbackup_list list "$1")
			if [ "$tmp_cond" == "No dataset found" ]
			then
				error "delete: dataset name error"
				return
			fi
			local list=""
			list=$(awk -v var1=$2 '$1 == var1 {print $2"@"$3}' final_list.txt)
			if [ "$list" != "" ]
			then
				zfs destroy "$list"
			else
				error "delete: no dataset to be deleted"
			fi
			else
			error "delete: ID must be numeric"
		fi
	elif [ $# -eq 1 ]
	then
		local tmp_cond=$(zbackup_list list "$1")
		if [ "$tmp_cond" == "No dataset found" ]
		then
			error "delete: Dataset name error"
			return
		fi
		local list2=$(awk 'NR>=2 {print $2"@"$3}' final_list.txt)
		while read -r line; do
			zfs destroy $line
		done <<< "$list2"
	else
		error "delete: Too many arguments"
	fi
}

zbackup_import() {
	shift
	if [ $# -eq 2 ]
	then
		local file_name=$(echo $2 | sed 's/\/backup\///' | sed 's/.xz.enc//' | sed 's/\./\//g')
		correct_file_name="$file_name"
		#file_name=$(echo "$file_name" | sed 's/\./\//g')
		openssl enc -d -aes-256-cbc -a -in "$2" | unxz | zfs receive "$1"
	else
		error "import: Number of arguments not correct"
	fi
}

zbackup() {
	local op="$1"

	case $op in
		create)
			zbackup_create $@
			;;
		list)
			zbackup_list $@
			;;
		delete)
			zbackup_delete $@
			;;
		export)
			zbackup_export $@
			;;
		import)
			zbackup_import $@
			;;
		'')
			error "Usage: zbackup[[--list | --delete | --export] target-dataset [ID] | [--import] target-dataset filename | target dataset [rotation count]]"
			;;
		*)
			zbackup_create $@
			;;
	esac
}

zbackup $@
